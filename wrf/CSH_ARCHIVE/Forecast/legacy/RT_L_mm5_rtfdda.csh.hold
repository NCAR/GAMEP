#!/bin/csh -f

###############################################################################
echo
echo  " ----------------------------------------------------------------------"
echo  " ---------------- MM5 FDDA and FCST start -----------------------------"
echo "$0 $argv[*]"
echo  " ----------------------------------------------------------------------"
###############################################################################

# set echo
set timestamp
setenv SUBSYSTEM MM5
setenv RM "rm -rf"

set DOMS = ( 1 2 3 4 )
if($?NUM_DOMS) then
 if ($NUM_DOMS == 5) then
  set DOMS = ( 1 2 3 4 5 )
 else if ($NUM_DOMS == 4) then
  set DOMS = ( 1 2 3 4)
 else if ($NUM_DOMS == 3) then 
  set DOMS = ( 1 2 3)
 else if ($NUM_DOMS == 2) then 
  set DOMS = ( 1 2 )
 else if ($NUM_DOMS == 1) then 
  set DOMS = ( 1 )
 endif
endif

#
# ENVIRONMENT
#
set CFILE="$MM5HOME/cycle_code/CONFIG_FILES/cshrc_"

$CheckConfigFiles
set cfstat = $status
if ( $cfstat != 0 ) then
 echo "${SUBSYSTEM} -- Missing ConfigFile -> exiting"
 exit (2)
endif

source ${CFILE}user.mm5sys.${MM5HOST};    
source ${CFILE}sizes.mm5sys.${MM5HOST}



if ( ${#argv} != 9) then
	echo "usage: mm5.csh this_cycle fcst_id timemax resttime cpun d4start out_int NODE ETA"
	echo "where start_date and this_cycle is ccyymmddhh"
	echo "fcst_id: = 1  Cold start; = 2 Restart for last cycle; = 3 restart in this cycle"
	echo "timemax and resttime are fcst and restart time in minutes"
	echo "cpun is the number of parallel processors"
	echo "d4start is the time to begin domain 4 (minutes)"
	echo "out_int is the time interval of MMOUT "
	echo "NODE: 0 -mpp; 1 - 31 running omp on node"
	echo "ETAAVN: ETA or AVN IC/BC"
	exit ( 1 )
endif

set this_cycle = $1
set fcst_id    = $2
set timemax    = $3
set resttime   = $4
set cpun       = $5
set d4start    = $6
set out_int    = $7
set NODE       = $8
set ETAAVN     = $9

if ( ! $?D4_LENGTH) then
setenv D4_LENGTH 13
endif

if ( $fcst_id == 3) then
@ d4end = $resttime + $D4_LENGTH * 60
else
set d4end = 44640
endif

set aa = `echo $NODE |cut -c -1`
set EXP = ""
if( $aa == "0") then
echo $aa
set EXP = `echo $NODE |cut -c 2-`
set NODE = $aa
echo "NODE=$NODE  EXP=$EXP "
endif

#	Get to the right directory

set sdir = $RUNDIR/$this_cycle

if ( ($fcst_id == 1) || ($fcst_id == 2)) then   # Final FDDA cycle
set tmp_work = MM5_F
else
set tmp_work = MM5_P
endif
set dir_work = $sdir/$tmp_work
$MustHaveDir $dir_work

echo $dir_work 
cd  $dir_work
echo "Now working in  $cwd"


if(-d $GEAPSTMP) then
 ln -s $dir_work $GEAPSTMP/$tmp_work
 set up_dir = $GEAPSTMP
else
 set up_dir = $sdir
endif

#	Bring stuff over that we need

if ($ETAAVN ==  "ETA") then
  set BCIC = "" 
else 
  set BCIC = "AVN"
endif

if( $NODE == 0 ) then
 if( -e $GSJOBDIR/namelists/MM5.namelist.template.V ) then
  cp $GSJOBDIR/namelists/MM5.namelist.template.V mmlif
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/namelists/MM5.namelist.template.V"
 else if ( -e ${MM5_TEMPLATE}.V.${MM5HOST} ) then
  cp ${MM5_TEMPLATE}.V.${MM5HOST} mmlif
  echo "${SUBSYSTEM} -- Using ${MM5_TEMPLATE}.V.${MM5HOST}"
 else
  echo "${SUBSYSTEM} -- Missing mmlif -> exiting"
  exit (3)
 endif

 if(-e $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC.$EXP) then
  cp $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC.$EXP mm5.mpich
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC.$EXP"
 else if ( -e $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC ) then
  cp $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC mm5.mpich
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/executables/mm5.mpich${cpun}$BCIC"
 else if ( -e ${MM5_MPICH}${cpun}$BCIC.$EXP ) then
  cp ${MM5_MPICH}${cpun}$BCIC.$EXP mm5.mpich
  echo "${SUBSYSTEM} -- Using  ${MM5_MPICH}${cpun}$BCIC.$EXP"
 else if ( -e ${MM5_MPICH}${cpun}$BCIC ) then
  cp ${MM5_MPICH}${cpun}$BCIC mm5.mpich
  echo "${SUBSYSTEM} -- Using ${MM5_MPICH}${cpun}$BCIC"
 else
  echo "${SUBSYSTEM} -- Missing mm5.mpp executable --  exiting"
  exit (4)
 endif

else
 if(-e $GSJOBDIR/namelists/MM5.namelist.template.V.$NODE) then
  cp $GSJOBDIR/namelists/MM5.namelist.template.V.$NODE mmlif
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/namelists/MM5.namelist.template.V.$NODE"
 else if ( -e $GSJOBDIR/namelists/MM5.namelist.template.V) then
  cp $GSJOBDIR/namelists/MM5.namelist.template.V mmlif
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/namelists/MM5.namelist.template.V"
 else if ( -e ${MM5_TEMPLATE}.V.${MM5HOST}.$NODE) then
  cp ${MM5_TEMPLATE}.V.${MM5HOST}.$NODE mmlif
  echo "${SUBSYSTEM} -- Using ${MM5_TEMPLATE}.V.${MM5HOST}.$NODE"
 else if ( -e ${MM5_TEMPLATE}.V.${MM5HOST}) then
  cp ${MM5_TEMPLATE}.V.${MM5HOST} mmlif 
  echo "${SUBSYSTEM} -- Using ${MM5_TEMPLATE}.V.${MM5HOST}"
 else
  echo "${SUBSYSTEM} -- Missing mmlif -> exiting"
  exit (4)
 endif

 if(-e $GSJOBDIR/executables/mm5.exe$BCIC.$NODE) then
  cp $GSJOBDIR/executables/mm5.exe$BCIC.$NODE mm5.exe
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/executables/mm5.exe$BCIC.$NODE"
 else if ( -e $GSJOBDIR/executables/mm5.exe$BCIC) then
  cp $GSJOBDIR/executables/mm5.exe$BCIC mm5.exe
  echo "${SUBSYSTEM} -- Using $GSJOBDIR/executables/mm5.exe$BCIC"
 else if ( -e ${MM5_EXE}$BCIC.hold) then
  cp ${MM5_EXE}$BCIC.hold mm5.exe 
  echo "${SUBSYSTEM} -- Using ${MM5_EXE}$BCIC.hold"
 else
  echo "${SUBSYSTEM} -- Missing mm5.executable --  exiting"
  exit (4)
 endif

endif

if ( ( -l fort.8 ) || ( -e fort.8 ) ) ${RM} fort.8
ln -s $MM5_ehtran fort.8
set ok = $status
if ( $ok != 0 ) then
	cp $MM5_ehtran fort.8
endif

######## testing ##########################################
#cp /home/fddasys/TERRAIN* .

foreach d ( $DOMS )
if ( -e $GSJOBDIR/TERRAIN/TERRAIN_DOMAIN$d ) then
 ln -s $GSJOBDIR/TERRAIN/TERRAIN_DOMAIN$d TERRAIN_DOMAIN${d}
 echo "${SUBSYSTEM}  Using Terrain in $GSJOBDIR "
else if ( -e  $TERRAIN_DIR/Domain${d}_New_LU.V.${MM5HOST} ) then
 ln -s $TERRAIN_DIR/Domain${d}_New_LU.V.${MM5HOST} TERRAIN_DOMAIN${d}
 echo "${SUBSYSTEM}  Using Terrain in $TERRAIN_DIR"
else
 echo "${SUBSYSTEM}  Missing file -> NO terrain in $GSJOBDIR or $TERRAIN_DIR"
 exit (2)
endif
end

# Input files

 if ( ( -l BDYOUT_DOMAIN1 ) || ( -e BDYOUT_DOMAIN1) ) ${RM} BDYOUT_DOMAIN1
 ln -s $up_dir/${this_cycle}_BDYOUT.${MM5HOST}          BDYOUT_DOMAIN1
 set ok = $status
 if ( $ok != 0 ) then
	cp $up_dir/${this_cycle}_BDYOUT          BDYOUT_DOMAIN1
 endif

foreach i ( $DOMS )
 if ( ( -l MMINPUT_DOMAIN$i ) || ( -e MMINPUT_DOMAIN$i ) ) ${RM} MMINPUT_DOMAIN$i
 if ( ( -l LOWBDY_DOMAIN$i  ) || ( -e LOWBDY_DOMAIN$i  ) ) ${RM} LOWBDY_DOMAIN$i
 ln -s $up_dir/${this_cycle}_MMINPUT_DOMAIN${i}.${MM5HOST} MMINPUT_DOMAIN$i
 set ok = $status
 if ( $ok != 0 ) then
        cp $up_dir/${this_cycle}_MMINPUT_DOMAIN${i}.${MM5HOST} MMINPUT_DOMAIN${i}
 endif
 ln -s $up_dir/${this_cycle}_LOWBDY_DOMAIN${i}.${MM5HOST} LOWBDY_DOMAIN${i}
 set ok = $status
 if ( $ok != 0 ) then
        cp $up_dir/${this_cycle}_LOWBDY_DOMAIN${i}.${MM5HOST} LOWBDY_DOMAIN${i}
 endif
end

# OBS nudging files 
#if ( ($fcst_id == 1) || ($fcst_id == 2) ) then  # for testing, remove prelim
foreach i ( $DOMS )
  set ii = 0
   foreach f  (`/bin/ls  $up_dir/*_s`)
  @ ii ++
  if($ii < 10) then
   ln -f -s $f  MM5OBS_DOMAIN${i}0${ii}
  else
   ln -f -s $f  MM5OBS_DOMAIN${i}${ii}
  endif
  end
end
#endif

# Restart file
if( $NODE != 0) then
foreach i ( $DOMS )
 if ($fcst_id <= 2) then 
  touch $up_dir/${this_cycle}.SAVE_DOMAIN${i}_F
  ln -s $up_dir/${this_cycle}.SAVE_DOMAIN${i}_F SAVE_DOMAIN${i}
 endif
 if ( ( -l RESTART_DOMAIN${i}) || ( -e RESTART_DOMAIN${i} ) ) ${RM} RESTART_DOMAIN${i}
 if ($fcst_id == 2) then
  ln -s $up_dir/${this_cycle}.RESTART_DOMAIN${i} RESTART_DOMAIN${i}
 else if ( $fcst_id == 3 ) then
  ln -s $up_dir/${this_cycle}.SAVE_DOMAIN${i}_F RESTART_DOMAIN${i}
 endif
end
endif

if ( $fcst_id == 1 ) then          # cold start for Final FDDA
 set ifrest = FALSE
 set savefrq  = $timemax
else if ( $fcst_id == 2 ) then      # Normal Final FDDA
 set ifrest = TRUE
 set savefrq  = $timemax
else if ( $fcst_id == 3 ) then      # Primary FDDA + FCST
 set ifrest = TRUE
 set savefrq  = 44600                # No savefile for restart is needed
endif

##
##if ( $d4start == 0 ) then
	set ioverw = 1
##else
##	set ioverw = 0
##endif

#	Modify namelist

ed mmlif << EOF > /dev/null
g/OUT_INT/s//$out_int/g
g/D4Start/s//$d4start/g
g/D4End/s//$d4end/g
g/IoverW/s//$ioverw/g
g/TimeMax/s//$timemax/g
g/Ifrest/s//$ifrest/g
g/Resttime/s//$resttime/g
g/Savefrq/s//$savefrq/g
w
q
EOF

if ( $ETAAVN != "ETA" ) then
ed mmlif << EOF > /dev/null
g/ISTLYR = 10, 40, 100, 200/s//ISTLYR = 10, 200/
g/ISMLYR = 10, 40, 100, 200/s//ISMLYR = 10, 200/
g/ISTLYR = 10,40,100,200/s//ISTLYR = 10, 200/
g/ISMLYR = 10,40,100,200/s//ISMLYR = 10, 200/
w
q
EOF
endif

#	Run the program

#3.3 3.4     - YLIU: curently RT_3.6 does not work (Jan. 2003)
if ($NODE == 0) then
cp ${CONSTANT_FILES}/MM5.LANDUSE.TBL LANDUSE.TBL
else
#3.6
cp ${CONSTANT_FILES}/MM53.6/*.TBL .
endif
cp ${CONSTANT_FILES}/MM53.6/*.TBL .
cp ${CONSTANT_FILES}/MM53.6/RRTM_DATA .

#echo "${SUBSYSTEM} -- Starting MM5 on $cpun processors"
#setenv MP_SET_NUMTHREADS $cpun
#setenv OMP_SET_NUMTHREADS $cpun
#setenv _DSM_PLACEMENT ROUND_ROBIN
#setenv _DSM_WAIT SPIN
#setenv OMP_DYNAMIC FALSE
#setenv MPC_GANG OFF

if ( ! -e mm5.exe && ! -e mm5.mpich) then
   echo "${SUBSYSTEM} -- No MM5 executable - $MM5_EXE "
endif

if( $NODE != 0) then
(ssh node$NODE "setenv OMP_NUM_THREADS $cpun;setenv MPSTKZ 64M;limit stacksize unlimited;cd $dir_work; ./mm5.exe " ) >! mm5_print.out
else
 ln -s -f $RUNDIR/restart_files restrts
# /opt/scali/bin/mpimon -stdin 0 -verbose $MM5_EXE -- n2 2 n3 2 n4 2 n5 2 n6 2 n7 2 n8 2 >>& mm5_print.out
#rsh n2 "cd $dir_work; rm rsl* show*; /home/bourgeoi/mpich-1.2.0/bin/mpirun -np 14 -machinefile ~/hosts $MM5_MPICH >>& mm5_print.out"
#rsh node2 "cd $dir_work; rm rsl* show*; /usr/local/mpich-1.2.5-eth/bin/mpirun -np $cpun -machinefile $GMPICONF $MM5_MPICH >>& mm5_print.out"
rm rsl* show*;
##LPC##/opt/mpi/mpich-1.2..8/bin/mpirun -np $cpun $MM5_MPICH >>& mm5_print.out
#/opt/mpi/mpich-1.2..8_with_newer_gm/bin/mpirun -np $cpun mm5.mpich >>& mm5_print.out
/usr/local/mpich/bin/mpirun -np $cpun mm5.mpich >>& mm5_print.out
endif

#	Move the important files around

## /home/mm5sys/bin/snuff ingest_mm5.pl
##sleep 5 


@ HOURLY_OUT =  60 / $out_int
foreach d ( $DOMS )
  if ( ($fcst_id == 1) || ($fcst_id == 2) ) then
   set fn=${this_cycle}_MMOUTPUT_DOMAIN${d}.${MM5HOST}_F
   set fnsave=${this_cycle}.SAVE_DOMAIN${d}_F
   set fnpr=${this_cycle}_mm5_f_print.out
  else if ( $fcst_id == 3 ) then
   set fn=${this_cycle}_MMOUTPUT_DOMAIN${d}.${MM5HOST}_P+FCST
   set fnsave=${this_cycle}.SAVE_DOMAIN${d}_P+FCST
   set fnpr=${this_cycle}_mm5_p+fcst_print.out
  endif

  if( ($fcst_id == 1) || ($fcst_id == 2) ) then
   # save Final analysis for all domains all times? ----
   # cat MMOUT_DOMAIN${d}* > $sdir/$fn    
    set cnt = 0
    foreach f (`/bin/ls MMOUT_DOMAIN${d}*`)
     @ cnt ++
     if( $cnt == $HOURLY_OUT ) then
      cat $f >> $sdir/$fn    #save HOURly Final analysis for all domains  ----
      # keep hourly D1 analysis only at GEAPSTMP directory
      if( -d $GEAPSTMP && $d == 1 ) "cat $f >> $up_dir/$fn"
      set cnt = 0
     endif
    end
   # keep partial SAVE file on /data:
   if( -d $GEAPSTMP) then
     cat SAVE_DOMAIN${d} | head -1000 > $sdir/$fnsave 
     echo "GEAPSTMP $GEAPSTMP"
   else
     rm SAVE_DOMAIN${d}
   endif
  else if ($fcst_id == 3) then          
    set cnt = 0
    set cnt1 = 0
    # keep hourly fcsts only
    foreach f (`/bin/ls MMOUT_DOMAIN${d}*`)
     @ cnt ++
     if( $cnt == $HOURLY_OUT ) then
      cat $f | head -210m >> $sdir/$fn  #all domains on /data
      # keep hourly D1 FCST only at /d1/GEAPSTMP with short cut-off 
      if( -d $GEAPSTMP && $d == 1 && $cnt1 < $CYC_INT + 2 ) "cat $f >> $up_dir/$fn"
      set cnt = 0
      @ cnt6 ++
     endif
    end
   #cp SAVE_DOMAIN${d} $up_dir/$fnsave 
  endif
end

  ls -l >> mm5_print.out
  echo "  --------------- MMLIF ------------------ "
  cat mmlif >> mm5_print.out
  echo " -------------- OBS   ------------------ "
  cat obs_* >> mm5_print.out
  cp mm5_print.out $sdir/${this_cycle}_mm5_p+fcst_print.out

  if( -d $GEAPSTMP) then
#  rm $GEAPSTMP/$tmp_work/MMOUT_DOMAIN*
#  rm $dir_work
#  mv $GEAPSTMP/$tmp_work $dir_work
   ln -s $dir_work $GEAPSTMP/$tmp_work
  endif
 
exit ( 0 ) 

#	Clean up
