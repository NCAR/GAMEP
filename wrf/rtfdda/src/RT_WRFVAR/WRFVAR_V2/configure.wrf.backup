# configure.wrf
#
# This file was automatically generated by the configure script in the
# top level directory. You may make changes to the settings in this
# file but be aware they will be overwritten each time you run configure.
# Ordinarily, it is necessary to run configure once, when the code is
# first installed.
#
# To permanently change options, change the settings for your platform
# in the file arch/configure.defaults then rerun configure.
#
SHELL           =       /bin/sh
DEVTOP          =       `pwd`
LIBINCLUDE      =       .

#
#Macros, these should be generic for all machines

LN      =       ln -sf
MAKE    =       make -i -r
RM      =       /bin/rm -f
MV      =       /bin/mv -f
CP      =       /bin/cp -f
AR      =       ar ru
M4      =       m4 -B12000

.SUFFIXES: .F .i .o .f .c

#### Get core settings from environment (set in compile script)
#### Note to add a core, this has to be added to.
#WRFVAR   = 
WRFVAR   =

COREDEFS = -DEM_CORE=$(WRF_EM_CORE) \
           -DNMM_CORE=$(WRF_NMM_CORE) -DNMM_MAX_DIM=1250 \
	   -DCOAMPS_CORE=$(WRF_COAMPS_CORE) \
           -DEXP_CORE=$(WRF_EXP_CORE) \
           -DDA_CORE=$(WRF_DA_CORE) \
	   $(WRFVAR)

#### For wrfvar, always use RWORDSIZE 8

RWORDSIZE	=	8
WORDSIZE_DEF	=	-DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4

#### Single location for defining total number of domains.  You need
#### at least 1 + 2*(number of total nests).  For example, 1 coarse
#### grid + three fine grids = 1 + 2(3) = 7, so MAX_DOMAINS=7.

MAX_DOMAINS	=	21
MAX_PROC	=	1024
RANLIB		=	ranlib

MPI_LIB		=
LOCAL_LIB	=
CONVERTOR_LIB	=

#### DM buffer length for the configuration flags.

CONFIG_BUF_LEN	=	8192

#### Default sed command and script for Fortran source files ####
SED_FTN = sed -f ../arch/standard.sed

#### Default ESMF dependence for embedded ESMF time manager ####
ESMF_MOD_DEPENDENCE = ../external/esmf_time_f90/ESMF_Mod.o

WRF_LIB		=	-L../external/io_int -lwrfio_int \
			-L../external/io_grib1 -lio_grib1 \
			-L../external/esmf_time_f90 -lesmf_time \
			../frame/module_internal_header_util.o \
			../frame/pack_utils.o

#### Architecture specific settings ####

# Settings for Intel xeon x86_64 i686 ia32 Xeon Linux, ifort compiler (single-threaded, no nesting)
#
FC              =       ifort
F77             =       $(FC)
CC              =       icc
CC_TOOLS        =       gcc
SFC             =       $(FC)
LD              =       $(FC)
CFLAGS          =       
TRADFLAG        =       -traditional
FCOPTIM         =       -O3 -xW
FCDEBUG         =       #-g
FCTYPE          =       -r8
FCFORM          =       -FR -cm -w
FCHOST          =       
FCBUFR          =       
FCBASE          =       $(FCBUFR) -convert big_endian
FC_FFT_RF       =       $(FCBUFR) -convert big_endian
ARCHFLAGS       =       -DIO_DEREF_KLUDGE \
                        $(WORDSIZE_DEF) \
                        -DNETCDF \
                        -DTRIEDNTRUE -DONLY_WRFMODEL_IO
EXTRAMODULES    =       
PERL            =       perl

LDFLAGS         =	-Wl,-rpath,$(LD_LIBRARY_PATH)
ENVCOMPDEFS     =       
WRF_CHEM	=	0 

NETCDFPATH      =       /opt/cray/netcdf/4.3.3.1/INTEL/14.0/
NETCDF_IO_PATH  =       external/io_netcdf
NETCDF_LIB	=       -L../external/io_netcdf -lwrfio_nf -L/opt/cray/netcdf/4.3.3.1/INTEL/14.0//lib -lnetcdf

LOCAL_LIBRARIES =       -L/usr/local/ncarg/lib -L/usr/X11R6/lib -L/usr/local/lib \
			-lncarg -lncarg_gks -lncarg_c -lX11

CPP             =       /lib/cpp $(TRADFLAG)
DM_1_CPP_FLAGS  =
DM_2_CPP_FLAGS  =
POUND_DEF       =       -DNO_RRTM_PHYSICS -DNONSTANDARD_SYSTEM -DF90_STANDALONE \
			-DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)

externals : wrfio_nf wrfio_int wrfio_grib1 esmf_time
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c ; \
	/bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

###########################################################
#
LIB		=	$(NETCDF_LIB) $(MPI_LIB) $(LOCAL_LIB) $(WRF_LIB)
EXTRAMODULES    =
FCBASEOPTS      =       $(FCTYPE) $(FCBASE) $(FCFORM) $(FCHOST) $(FCDEBUG) -I.
FC_FFT_RF_OPTS  =       $(FCTYPE) $(FC_FFT_RF) $(FCFORM) $(FCHOST) $(FCDEBUG) -I.
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../da_3dvar -I../da_3dvar/src \
			-I../external/io_netcdf -I../external/io_int \
                        -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc

REGISTRY        =       Registry
CPPFLAGS        =       -I$(LIBINCLUDE) -P $(ARCHFLAGS) $(ENVCOMPDEFS) \
			$(DM_1_CPP_FLAGS) $(COREDEFS) $(POUND_DEF)

INC_MOD_3DVAR   =       -I../../$(NETCDF_IO_PATH) \
			-I../../da_3dvar -I../../da_3dvar/src \
                        -I../../external/io_int \
                        -I../../external/esmf_time_f90 \
                        -I../../frame -I../../share -I../../inc
FCFLAGS_3DVAR   =       $(FCOPTIM) $(FCBASEOPTS)
FCFLAGS_FFT_RF  =       $(FCOPTIM) $(FC_FFT_RF_OPTS)
F77FLAGS_BUFR   =       $(FCTYPE) $(FCBUFR) $(FCHOST) $(FCDEBUG) -I.
F77FLAGS_3DVAR  =       $(FCTYPE) $(FCBASE) $(FCHOST) $(FCDEBUG) -I.
CPPFLAGS_3DVAR  =       $(DM_2_CPP_FLAGS) \
                        -I$(LIBINCLUDE) -I../../inc -P $(ARCHFLAGS) $(POUND_DEF) $(WRFVAR)
FUFLAGS         =       $(FCOPTIM) $(FCBASE) $(FCFORM) $(FCDEBUG)

wrfio_nf : 
	( cd ../external/io_netcdf ; \
        make NETCDFPATH=$(NETCDFPATH) CPP="$(CPP)" \
	RANLIB="$(RANLIB)" \
	FC="$(FC)" FCFLAGS="$(FCDEBUG) $(FCFORM) $(FCBASE) -w" TRADFLAG="$(TRADFLAG)" ; \
	if [ $(RWORDSIZE) -eq 8 ] ; then \
	/bin/rm -f foo_io_flags.h; \
	sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
	/bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
        make CC="$(CC)" CPP="$(CPP)" \
	RANLIB="$(RANLIB)" \
	SFC="$(SFC)" \
	FC="$(FC)" FCFLAGS="$(FCDEBUG) $(FCFORM) $(FCBASE)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
        make CPP="$(CPP)" \
	RANLIB="$(RANLIB)" \
	CC="$(CC)" CFLAGS="$(CFLAGS)" \
	SFC="$(SFC)" \
	FC="$(FC)" FCFLAGS="$(FCDEBUG) -I. $(FCFORM) $(FCBASE)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	make FC="$(FC) $(FCFLAGS)" \
	RANLIB="$(RANLIB)" \
	CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile

module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_domain.o : module_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o mediation_interp_domain.o                   \
mediation_force_domain.o mediation_feedback_domain.o           \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f

#There is probably no reason to modify these rules


.F.i:
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $@
	mv $*.i $(DEVTOP)/pick/$*.f
	cp $*.F $(DEVTOP)/pick

.F.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

.F.f:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b

.f.o:
	$(RM) $@
	$(FC) -c $(FCFLAGS) $*.f

.c.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) $*.c

