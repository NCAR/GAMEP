
!--------------------------------------------------------------------------
!                             PARAMETERS
!---------------------------------------------------------------------------

   !  The following parameters are used as flags to indicate either a
   !  MISSING data value (real number) in the "measurement" TYPE or an
   !  "end of data" flag (two fields with end_data  flag mean end of
   !  measurements for one observation).

   INTEGER , PARAMETER , PRIVATE                  ::  missing = -888888
   INTEGER , PARAMETER                            ::  end_data = -777777

   !  define error return codes used by 'read_measurements' routine
   INTEGER , PARAMETER                            ::  ok = 0 , &
                                                      eof_err = 1 , &
                                                      no_data = 2 , &
                                                      read_err = 3

!  FORMAT STRINGS for input/output of data
!  These format strings correspond to the data structures in this file
!  and are used for input and output of values in the 'report' structure
!  (first format string) and the 'measurement' structure (second format).
!  Note that report struct contains the first of a linked list of 
!  measurements; this first meas is read using the 'meas_format';

   CHARACTER ( LEN = 120 ) , PARAMETER :: rpt_format =  &
                ' ( 2f20.5 , 2a40 , ' &             ! format for location_type
             // ' 2a40 , 1f20.5 , 5i10 , 3L10 , ' & ! format for source_info
             // ' 2i10 , a20 , ' &                  ! fmt for valid_time
             // ' 13( f13.5 , i7 ) ) '              ! fmt for 'terrestrial' 

   CHARACTER ( LEN = 120 ) , PARAMETER :: meas_format = & 
                ' ( 10( f13.5 , i7 ) ) '            ! fmt for measurement rcd

   CHARACTER ( LEN = 120 ) , PARAMETER :: end_format = &
                ' ( 3 ( i7 ) ) '                    ! fmt for end record

!-------------------------------------------------------------------------
!                          DATA STRUCTURES
!--------------------------------------------------------------------------
   !  These data structures are built to hold all of the required information 
   !  from a single level report.  This includes, but is not limited to,
   !  land based surface observations, ocean based surface observations,
   !  and aircraft data.  All data is assumed to be given a horizontal
   !  location (lat/lon) and a timestamp.  For the data to be useful, there
   !  needs to be a vertical location presribed, or derivable.  For data with
   !  multiple vertical observations, the 'meas' structure is also required.
   !  This includes, but is not limited to, sounding data, satellite derived
   !  winds and satellite derived thickness.

   !  The information in the following two records is usually available 
   !  in every report.  

!-------------------------------------------------------------------------
   TYPE location_type
      !  The fields in this record uniquely identify the source of the 
      !  data, so that duplicates of data can be merged or discarded.
      !  The horizontal location of this report (assumed constant, even
      !  for balloon ascent) is geven by the lat/lon of the site.
      
      REAL                   :: latitude  , &   ! latitude (+ degrees east)
                                longitude       ! longitude (+ degrees north)

      CHARACTER ( LEN = 40 ) :: id , &          ! 5 digit identifier, 
                                                ! consisting of a 2 digit block 
                                                ! number and a 3 digit 
                                                ! identifier (for soundings)
                                                ! for WMO sttn; non digit
                                                ! for other sources
                                name            ! The name corresponds to
                                                ! the id (is obtained from id
                                                ! in the program that is 
                                                ! source of data
   END TYPE location_type


!---------------------------------------------------------------------------
   TYPE source_info
      CHARACTER ( LEN = 40 ) :: platform , &    ! description of the 
                                                ! measurement device
                                source          ! GTS data, NCAR ADP files, 
                                                ! bogus information, etc
      REAL                   :: elevation       ! station elevation

      !  During the decoding process, how many errors (non conforming
      !  codes) were encountered, and how many warnings (this is a subjective
      !  call based on repeated incorrect -- but probably not garbled --
      !  GTS codes).  If a bulletin is completely garbled, the logical
      !  flag to not consider this report is set.
      INTEGER              :: num_vld_fld , & ! number of valid fields in the
                                              ! entire report; used as the
                                              ! first tie-breaker in deciding
                                              ! which conflicting data items
                                              ! to keep if have duplicate rpts
                              num_error , &   ! number of errors 
                                              ! encountered during the
                                              ! decoding process
                              num_warning , & ! number of warnings 
                                              ! encountered during the 
                                              ! decoding process
                              seq_num , &     ! sequence numbers that tell
                                              ! which of 2 reports is more
                                              ! recent.
                              num_dups        ! number of duplicates found of
                                              ! this observation 
      LOGICAL              :: is_sound        ! is-a-sounding tells whether
                                              ! the observation possibly has
                                              ! multiple levels vs having 
                                              ! only one level for srfc ob.
      LOGICAL              :: bogus           ! T/F if this is a bogus 
                                              ! observation
      LOGICAL              :: discard         ! Tells whether this observation
                                              ! has been found to be a dup
                                              ! AND has been discarded or
                                              ! merged.
   END TYPE source_info

!--------------------------------------------------------------------------
   TYPE field
      !  Defines a data type consisting of a paired data value (real) with a
      !  quality control flag that holds a binary-coded combination of error
      !  codes; the codes  identify possible problems with the data.
      REAL                   :: data
      INTEGER                :: qc              !  Quality control flags
                                                !  that are 0 if data is
                                                !  good, or different 
                                                !  integers depending upon
                                                !  what error(s) occured
   END TYPE field

!-------------------------------------------------------------------------
   TYPE terrestrial
   !  The data that will occur, at most, once during a report is 
   !  listed here.  These are typically terrestrial measured values.  The
   !  surface met fields are stored in a separate TYPE, to allow a 
   !  POINTER to the next level (if one exists).  This needs to be a 
   !  separate TYPE so as to allow a POINTER to it 
      TYPE ( field )         :: slp       , &   ! sea level pressure
                                ref_pres  , &   ! reference pres level for
                                                ! the thickness
                                ground_t  , &   ! ground temperature
                                sst       , &   ! sea surface temperature
                                psfc      , &   ! surface pressure
                                precip    , &   ! precipitation accumulation
                                t_max     , &   ! daily temperature max
                                t_min     , &   ! daily temperature min
                                t_min_night , & ! min overnight temperature
                                p_tend03  , &   ! pressure tendency in 3hr
                                p_tend24  , &   ! pressure tendency in 24hr
                                cloud_cvr , &   ! total cloud cover (oktas)
                                ceiling         ! height of lowest cloud base
   END TYPE terrestrial 


!-------------------------------------------------------------------------
!  GTS report time: the valid time of the report.  The largest INTEGER values 
!  require only 8 digits, so that this should function properly with 
!  32-bit INTEGERS.  
   TYPE time_info
      INTEGER                :: sut      , &    ! number of seconds since 1 Jan
                                                ! 0000 UTC 1970
                                julian          ! Julian day
      CHARACTER ( LEN = 14 )    date_char       ! CCYYMMDDHHmmss date
   END TYPE time_info

!--------------------------------------------------------------------------
   TYPE meas_data
   !  The met data involved with this program is defined in this TYPE.  The
   !  standard state variables (wind, temperature, moisture, with pressure
   !  and/or height to fix the vertical location) are stored here.  For 
   !  single level observations, only one of these records is used per     
   !  observation.   For multi-level reports, a linked list of these 
   !  measurement TYPEs is generated.
      TYPE ( field )         :: pressure    , & ! pressure of observation
                                height      , & ! height (above sea level) 
                                temperature , & ! 
                                dew_point   , & ! 
                                speed       , & ! 
                                direction   , & ! 
                                u           , & ! u and v components of wind
                                v           , & ! are derived from spd and dir
                                rh          , & !
                                thickness       ! 
   END TYPE meas_data


!--------------------------------------------------------------------------
   TYPE measurement
      TYPE ( meas_data )               :: meas  ! contains data and qc code
      TYPE ( measurement ) ,  POINTER  :: next  ! the met info is handled
                                                ! as a linked list of the  
                                                ! measurement type
   END TYPE measurement

!-------------------------------------------------------------------------
!  Combine above defined structure into one 'report' structure.
   TYPE report                                 ! this is the entire report
      TYPE ( location_type ) :: location       ! for a single time, from a 
      TYPE ( source_info )   :: info           ! single reporting platform,
      TYPE ( time_info )     :: valid_time     ! a sounding, surface, buoy,
      TYPE ( terrestrial )   :: ground         ! aircraft or ship report, it 
      TYPE ( measurement ) , &
               POINTER       :: surface        
   END TYPE report                            
                                             
!======================================================================

