376c376,381
<    real,parameter    ::  brcr_ub = 0.0,brcr_sb = 0.25,cori = 1.e-4
---
> ! ----->> BEGIN STAGE RAL3.8.1R0 SOURCE UPDATE 1 - MODIS
> ! yliu 20080505 - For stable layer over snow, we do not want
> !                 brcr_sb = 0.25, let's try 0.05, also use Ric = 0.25
>   !real,parameter    ::  brcr_ub = 0.0,brcr_sb = 0.25,cori = 1.e-4
>    real,parameter    ::  brcr_ub = 0.25,brcr_sb = 0.05,cori = 1.e-4
> ! yliu end
377a383
> ! ----->> END STAGE RAL3.8.1R0 SOURCE UPDATE 1 - MODIS
702,703c708,716
<          spdk2   = max(ux(i,k)**2+vx(i,k)**2,1.)
<          brup(i) = (thvx(i,k)-thermal(i))*(g*za(i,k)/thvx(i,1))/spdk2
---
> ! ----->> BEGIN STAGE RAL3.8.1R0 SOURCE UPDATE 2 - MODIS
> ! yliu 20081028: local Ri
>       !  spdk2 = max((ux(i,k)**2+vx(i,k)**2),1.)
>       !  brup(i) = (thvx(i,k)-thermal(i))*(g*za(i,k)/thvx(i,1))/spdk2
>          SPDK2=amax1(1.,abs((sqrt(UX(I,K)**2+VX(I,K)**2)-                      &
>                sqrt(UX(I,K-1)**2+VX(I,K-1)**2) )**2))
>          BRUP(I)=(THVX(I,K)-THVX(I,K-1))*G*(ZA(I,K)-ZA(I,K-1))                 &
>                  /THVX(I,K)/SPDK2
> ! yliu 20081028: local Ri end
704a718
> ! ----->> END STAGE RAL3.8.1R0 SOURCE UPDATE 2 - MODIS
796,797c810,818
<          spdk2   = max(ux(i,k)**2+vx(i,k)**2,1.)
<          brup(i) = (thvx(i,k)-thermal(i))*(g*za(i,k)/thvx(i,1))/spdk2
---
> ! ----->> BEGIN STAGE RAL3.8.1R0 SOURCE UPDATE 3 - MODIS
> ! yliu 20081028: local Ri
>       !  spdk2 = max((ux(i,k)**2+vx(i,k)**2),1.)
>       !  brup(i) = (thvx(i,k)-thermal(i))*(g*za(i,k)/thvx(i,1))/spdk2
>          SPDK2=amax1(1.,abs((sqrt(UX(I,K)**2+VX(I,K)**2)-                      &
>                sqrt(UX(I,K-1)**2+VX(I,K-1)**2) )**2))
>          BRUP(I)=(THVX(I,K)-THVX(I,K-1))*G*(ZA(I,K)-ZA(I,K-1))                 &
>                  /THVX(I,K)/SPDK2
> ! yliu 20081028: local Ri end
798a820
> ! ----->> END STAGE RAL3.8.1R0 SOURCE UPDATE 3 - MODIS
1294a1317
> ! ----->> BEGIN STAGE RAL3.8.1R0 SOURCE UPDATE 4 - MODIS
1309c1332,1333
< ! mchen add this line to make sure NMM can still work with YSU PBL
---
> ! mchen  add this line to make sure NMM can still work with YSU PBL
>      ad(i,1) = 1.
1311,1312c1335,1338
<        ad(i,1) = 1.+ctopo(i)*ust(i)**2/wspd1(i)*rhox(i)*g/del(i,1)*dt2         &
<         *(wspd1(i)/wspd(i))**2
---
>        ad(i,1) = 1.+ctopo(i)*ust(i)**2/wspd1(i)*rhox(i)*g/del(i,1)*dt2
> ! yliu 20131003h7 comment out the line below
>       ! *(wspd1(i)/wspd(i))**2
> 
1314,1315c1340,1342
<        ad(i,1) = 1.+ust(i)**2/wspd1(i)*rhox(i)*g/del(i,1)*dt2                  &
<         *(wspd1(i)/wspd(i))**2
---
>        ad(i,1) = 1.+ust(i)**2/wspd1(i)*rhox(i)*g/del(i,1)*dt2
> ! yliu 20131003h7 comment out the line below
>       ! *(wspd1(i)/wspd(i))**2
1317,1318c1344,1361
<      f1(i,1) = ux(i,1)+uox(i)*ust(i)**2*g/del(i,1)*dt2/wspd1(i)
<      f2(i,1) = vx(i,1)+vox(i)*ust(i)**2*g/del(i,1)*dt2/wspd1(i)
---
>      f1(i,1) = ux(i,1)
>      f2(i,1) = vx(i,1)
> 
> !!   if(present(ctopo)) then
> !!     f1(i,1) = ux(i,1)-ux(i,1)/wspd1(i)*ctopo(i)*ust(i)*ust(i)/zq(i,2)*dt2
> ! yliu 20081027 - comment out the line below
> !!                !     *(wspd1(i)/wspd(i))**2
> !!     f2(i,1) = vx(i,1)-vx(i,1)/wspd1(i)*ctopo(i)*ust(i)*ust(i)/zq(i,2)*dt2
> ! yliu 20081027 - comment out the line below
> !!                !     *(wspd1(i)/wspd(i))**2
> !!   else
> !!     f1(i,1) = ux(i,1)-ux(i,1)/wspd1(i)*ust(i)*ust(i)/zq(i,2)*dt2
> ! yliu 20081027 - comment out the line below
> !!                !     *(wspd1(i)/wspd(i))**2
> !!     f2(i,1) = vx(i,1)-vx(i,1)/wspd1(i)*ust(i)*ust(i)/zq(i,2)*dt2
> ! yliu 20081027 - comment out the line below
> !!                !     *(wspd1(i)/wspd(i))**2
> !!   endif
1321a1365
> ! ----->> END STAGE RAL3.8.1R0 SOURCE UPDATE 4 - MODIS
